name: "Socket Temperature Is UP"

run_every:
  seconds: 1

realert:
  minutes: 10

index: datana-smart-dev-logs-*
####index: datana-smart-test-logs-*
# A rule that matches if num_events number of events occur within a timeframe
num_events: 1

###################################
type: metric_aggregation

timeframe:
  seconds: 1

buffer_time:
  seconds: 1

metric_agg_key: "data.transportMessage.content.sensors.status"
#metric_agg_script:

# https://github.com/Yelp/elastalert/issues/1010
timestamp_field: "@timestamp"
timestamp_type: unix_ms

metric_agg_type: "value_count"
####query_key: "@timestamp"
query_key: component.keyword
#####query_key: "data.transportMessage.content.sensors.status"
doc_type: _doc

bucket_interval:
  seconds: 1

sync_bucket_interval: true
#allow_buffer_time_overlap: true
#use_run_every_query_size: true

min_threshold: 0
max_threshold: 0.999


writeback_index: dev_index_alert
filter:
  - query:
      query_string:
        query: "data.transportMessage.content.sensors.status: 0"
#        query: "data.transportMessage.content.sensors.status: 0 OR data.transportMessage.content.sensors.status: 1"
        #query: "(@timestamp > now-2000s)"

alert:
  - "telegram"

use_local_time: True

## телеграм для релизов датаны (для примера взято)
##      def final constTelegramReleaseURL = "https://api.telegram.org/bot1171367749:AAFgyOW0LGRLl9NHo9TkZIGNUdd6cFKYGqo/sendMessage?chat_id=-1001451379215&parse_mode=HTML"

telegram_bot_token: 1171367749:AAFgyOW0LGRLl9NHo9TkZIGNUdd6cFKYGqo

telegram_room_id: "@DatanaReleaseEvent"

alert_text: "алерт сработал. Server is UP"
alert_text_args: []
#alert_text: "from elastalert - {0}, {1}, {2}, {3}"
#alert_text_args: [ "hostname", "component", "message", "@timestamp" ]
alert_text_type: alert_text_only


